"use strict";window.addEventListener("DOMContentLoaded",function(){if(document.querySelector("header")){var e=function(){300<window.scrollY&&"/"===window.location.pathname&&!window.location.search?t.setAttribute("style","background:black;box-shadow:0 0 10px black"):window.location.search?t.setAttribute("style","background:black;box-shadow:0 0 10px black"):t.setAttribute("style","background:transparent;box-shadow:0 0 10px transparent")},t=document.querySelector("header");window.location.search&&t.setAttribute("style","background:black;box-shadow:0 0 10px black"),"/"!=window.location.pathname?(window.removeEventListener("scroll",e),t.setAttribute("style","background:black;box-shadow:0 0 10px black")):window.addEventListener("scroll",e,!1)}}),document.querySelector(".hero-scroll-down")&&document.querySelector(".hero-scroll-down").addEventListener("click",function(){window.scrollBy({top:window.innerHeight-70,left:0,behavior:"smooth"})}),window.addEventListener("DOMContentLoaded",function(){if(document.querySelector("#login-modal-trigger")){var t=function(){var e=n.value,t=c.value;if(d.setAttribute("disabled",!0),l.textContent="",n.value.trim()&&c.value.trim()){var r=JSON.stringify({name:e,password:t});p.classList.add("wrapper-active"),fetch("/login",{method:"POST",headers:{"Content-Type":"application/json"},body:r}).then(function(e){return e.json()}).then(function(e){p.classList.remove("wrapper-active"),d.setAttribute("disabled",!1),n.value="",c.value="",e.error?l.textContent="The username or password provided is incorrect":window.location.href="/"}).catch(function(e){console.log(e)})}else p.classList.remove("wrapper-active"),e.trim()?t.trim()||(i.textContent="*Password field is empty!"):a.textContent="*Username field is empty!"},e=function(){r.classList.toggle("modal-active"),o.classList.toggle("wrapper-active")},r=document.querySelector("#login-modal"),o=document.querySelector("#login-modal-wrapper.--wrapper"),n=document.querySelector("#login-modal--username"),a=document.querySelector("#login-modal--username-error"),c=document.querySelector("#login-modal--password"),i=document.querySelector("#login-modal--password-error"),l=document.querySelector("#login-modal--login-error"),d=document.querySelector("#login-modal--button"),s=document.querySelector("#login-modal-trigger"),u=document.querySelector(".modal--close-btn"),p=document.querySelector("#loader-wrapper");r.addEventListener("click",function(e){return e.stopPropagation()}),s.addEventListener("click",e),u.addEventListener("click",e),o.addEventListener("click",e),d.addEventListener("click",t),o.classList.contains("wrapper-active")?window.addEventListener("keydown",function(e){e.stopPropagation(),13===e.keyCode&&d.addEventListener("click",t)}):window.removeListener("keydown",function(e){e.stopPropagation(),13===e.keyCode&&d.addEventListener("click",t)})}}),function(){var c=!0;window.addEventListener("DOMContentLoaded",function(){if(document.querySelector("#articles")){var r=function(e){c&&(a.textContent=e.length,c=!1),n.innerHTML="",e.length?(e.forEach(function(e){n.innerHTML+='\n                    <div class="article-item">\n                            <p id="article-title">'.concat(e.title,'</p>\n                            <p id="article-description">').concat(e.description,'</p>\n                            <p id="article-published-date">').concat(e.publishedDate,'</p>\n                            <p id="article-author">You</p>\n                            <div class="stylish-row-group">\n                                <a href="/dashboard/editor?id=').concat(e._id,'"><div class="stylish-tag">EDIT</div></a>\n                                <div id="delete-article" data-article-id=').concat(e._id,' class="stylish-tag" style="background-color: #E91E63!important;">DELETE</div>\n                            </div>\n                </div>\n                    ')}),t()):(n.innerHTML+='\n                    <div class="article-item">\n                            <p id="article-title">No post found</p>\n                </div>',l.classList.remove("wrapper-active"))},t=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;e&&"string"==typeof e?(console.log("Deleting",c),l.classList.add("wrapper-active"),i(e,function(e){c="",l.classList.remove("wrapper-active"),alert(e),window.location.reload()})):(r.classList.toggle("modal-active"),o.classList.toggle("wrapper-active"))}l.classList.remove("wrapper-active");var r=document.querySelector("#alert-modal"),o=document.querySelector("#alert-modal-wrapper.--wrapper"),e=document.querySelector("#alert-modal--closeBtn"),n=document.querySelector("#alert-modal-yes"),a=document.querySelector("#alert-modal-no"),c=(e=document.querySelector("#alert-modal--closeBtn"),"");r.addEventListener("click",function(e){return e.stopPropagation()}),e.addEventListener("click",t),o.addEventListener("click",t),a.addEventListener("click",t),n.addEventListener("click",function(){t(c)}),setTimeout(function(){Array.from(document.querySelectorAll("#delete-article")).forEach(function(e){return e.onclick=function(e){c=e.target.dataset.articleId,console.log("Triggering modal",c),t()}})},0)},o=function(e,t){l.classList.add("wrapper-active"),fetch("/search?q=".concat(e)).then(function(e){return e.json()}).then(function(e){l.classList.remove("wrapper-active"),t(e.results),l.classList.remove("wrapper-active")}).catch(function(e){return alert("An error occurred")})},i=function(e,t){l.classList.add("wrapper-active"),fetch("/api/article/delete/".concat(e)).then(function(e){return e.json()}).then(function(e){l.classList.remove("wrapper-active"),t(e.message)}).catch(function(e){l.classList.remove("wrapper-active"),alert("An error occured when deleting the post")})},e=document.querySelector("input#dashboard-search"),n=document.querySelector("#articles"),l=document.querySelector("#loader-wrapper"),a=document.querySelector("#article-count");o("",r),e.onkeyup=function(e){l.classList.add("wrapper-active"),n.innerHTML="";var t=e.target.value;o(t,r)}}})}()(function(){if(document.querySelector(".sidebar")){var t=document.querySelector(".sidebar"),r=document.querySelector("#sidebar-wrapper.--wrapper");if(document.querySelector(".sidebar--trigger")){var e=function(e){e.stopPropagation(),t.classList.toggle("sidebar-active"),r.classList.toggle("wrapper-active")};document.querySelector(".sidebar--trigger").addEventListener("click",e),r.addEventListener("click",e)}}})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
